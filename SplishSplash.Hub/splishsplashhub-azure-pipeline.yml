# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: none # will disable CI builds entirely

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '9bfaf231-9848-402c-9f3c-89f8e58457e3/55ad23fb-be9a-4c5c-9fee-de6bd00fbd15'
    includeNuGetOrg: true

- task: DotNetCoreCLI@2
  displayName: .net Core Build Projects
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your need

- task: DotNetCoreCLI@2
  displayName: "dotnet pack SplishSplash.Hub.Authentication"
  inputs:
    command: 'pack'
    arguments: '--configuration $(buildConfiguration)'
    packagesToPack: 'SplishSplash.Hub.Authentication/SplishSplash.Hub.Authentication.csproj'
    nobuild: true
    versioningScheme: 'off'

- task: DotNetCoreCLI@2
  displayName: "dotnet pack SplishSplash.Hub.Authentication.Abstractions"
  inputs:
    command: 'pack'
    arguments: '--configuration $(buildConfiguration)'
    packagesToPack: 'SplishSplash.Hub.Authentication.Abstractions/SplishSplash.Hub.Authentication.Abstractions.csproj'
    nobuild: true
    versioningScheme: 'off'

- task: NuGetCommand@2
  displayName: NuGet Push
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '9bfaf231-9848-402c-9f3c-89f8e58457e3/55ad23fb-be9a-4c5c-9fee-de6bd00fbd15'
    allowPackageConflicts: true

- task: DotNetCoreCLI@2
  displayName: .net Core Publish Linux-ARM Self-Contained
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--runtime linux-arm /p:EnvironmentName=Production --self-contained true --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/arm-selfcontained'
    zipAfterPublish: True

- task: DotNetCoreCLI@2
  displayName: .net Core Publish Linux-ARM
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--runtime linux-arm /p:EnvironmentName=Production --self-contained false --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/arm'
    zipAfterPublish: True

- task: DotNetCoreCLI@2
  displayName: .net Core Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  displayName: .net Core Create Artifacts
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'splishsplashhub'